
//  ----------------------------------------- struct -----------------------------------------------
//        input   : 1rpm (clockwise)  -->  output : 2rpm (counter-clockwise)
//     step motor : 1rpm (clockwise)  -->  output : 3rpm (counter-clockwise)
//
//      |-----------|    |----------------|     |----------|
//      |   input   |----|  main gearbox  |---> |  output  |
//      |-----------|    |----------------|     |----------|
//                                |
//      |------------|            |
//      | step motor |------------|
//      |------------|
//  ------------------------------------------------------------------------------------------------

//----- pixhawk에서 나오는 pwm ------
//   period  |  duty   | throttle  
//   2.5ms   |  1.1ms  |     0%
//   2.5ms   |  1.5ms  |    50%
//   2.5ms   |  1.9ms  |   100%
// ---------------------------------

//  ------------------------------------ timer at CTC mode -----------------------------------------
//  prescaler 64 일 경우 : 1/16Mhz*64 = 4us  (64개의 클럭 당 1개의 클럭으로 사용하겠다!)
//                        TCNT는 0부터 4us마다 1씩 증가 
//  OCRnA = 24 일 경우   : TCNTn값이 24일 때 TIMERn_COMPA_vect 인터럽트 발생하며 TCNT는 0부터 다시 시작
//                        0부터 cycle이 반복되므로  24+1 = 25
//                        25*4us = 100us 마다 타이머 인터럽트가 발생하게 된다
//  ------------------------------------------------------------------------------------------------

//  -------------------------------------- input capture -------------------------------------------
//  timer1만 사용 가능
//  ICP에 TIMER1_CAPT_vect 인터럽트가 발생할 때 ICR1 <- TCNT1
//  rising or falling edge 에 interrupt를 발생시킬지 정할 수 있다.
//  아두이노 우노에는 1개의 ICP(input capture pin)만 존재
//  ------------------------------------------------------------------------------------------------

//  ------------------------------------- pulse 출력 방식 -------------------------------------------
//  step motor는 400pulse/rev 로 설정
//  ex. 60 rpm 으로 회전시키고 싶다면 1초에 1회전 이므로 1초에 400pulse 를 입력해야함.
//      => 1/400 = 2.5ms의 주기로 pulse 출력
//      => timer2를 이용하여 pulse를 출력시키는데 출력방식으로 인터럽트마다 출력 핀을 toggle 시키기 때문에
//         절반의 주기를 가진 타이머를 생성해야된다.
//      => 1.25ms 마다 인터럽트를 발생시키는 타이머 생성. 인터럽트마다 출력값 toggle 하여 pulse 출력
//  ------------------------------------------------------------------------------------------------

//  ---------------------------------------- pulse 측정 --------------------------------------------
//  1. 입력 rpm : [1250000/ic]
//      pulse 주기 측정 : input capture
//      TIMER1 : 64 prescaler => 4us clock  |  BLDC : 12pulse/rev   
//     1) ICP1에 인터럽트 들어올 때마다 ICR1 값을 ic 변수에 저장시키면서 TCNT1 reset
//     2) 1/(ic*4us) *60 = 1분에 들어오는 pulse의 수
//     3) input_rpm = 1/(ic*4us) *60 /12 = 1,250,000/ic
//
//  2. 원하는 최종 rpm / 2 : [rpm]
//      pulse duty 측정 : pixhawk_rpm => (원하는 최종출력 rpm/2) = 변수 rpm  
//      TIMER0 : 64 prescaler => 4us clock  |  OCR0A : 15 => 64us마다 interrupt  
//      인터럽트 : INT0 pin 에 들어오는 픽스호크 pwm의 rising or falling edge 에 check 함수 실행
//     1) 64us 마다 cnt++
//     2) pwm이 rising edge일 때 cnt=0 으로 reset
//              falling edge일 때 t_pix <- cnt
//     3) if(cnt<=18) =>  rpm=0 (-> 픽스호크의 스로틀이 0%일 때 1.1ms 이므로 1100/64us = 17~18 번의 cnt가 찍히게 된다.)
//        else        =>  rpm = (t_pix-18)*30  (-> 이는 임의의 수치이므로 변경하여야한다.)
//     => 높은 분주율에 의해 픽스호크 pwm을 정밀하게 체크하고있지 못한다는 한계
//     => 분주율이 더 낮으면 실행 오류, OCR 줄이는 방향으로 고려
//  ------------------------------------------------------------------------------------------------

//  ----------------------- OCR2A 설정 (step motor에 인가할 pulse의 period) ---------------------------
//    입력rpm = 1250000/ic  | 최종rpm/2 = rpm | 스텝모터rpm = step_rpm  | 스텝모터 : 400pulse/rev
//    timer2 : 256 prescaler => 16us
//    입력rpm을 최종rpm/2
//  1) want = (입력rpm - 최종rpm/2)
//  2) if(want > 0) // 감속 => 스텝모터rpm = want*2/3;    (counter clockwise) 
//     else         // 가속 => 스텝모터rpm = (-want)*2/3; (clockwise)         
//  3) OCR2A = {16MHz*(원하는 인터럽트의 주기)/prescaler} -1
//     원하는 인터럽트의 주기 = (스텝모터로 인가하여야 할 pulse 주기)/2
//                         = (1/400)/(스텝모터rpm)/2 *60
//     OCR2A = 16M *60/400/(스텝모터rpm)/2/256 - 1
//           = 4687.5/스텝모터rpm -1
//  
//  ------------------------------------------------------------------------------------------------
